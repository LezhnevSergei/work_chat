{"version":3,"sources":["redux/actions/deleteUser.js","redux/types.js","components/Navbar/Navbar.js","components/Header/Header.js","redux/actions/removeMessage.js","redux/actions/getUser.js","redux/actions/fetchMessages.js","redux/actions/messageWhichEditing.js","components/Message/Message.js","components/Loader/Loader.js","components/MessageList/MessageList.js","redux/actions/createMessage.js","redux/actions/editMessage.js","components/MessageInput/MessageInput.js","components/Chat/Chat.js","pages/CommonChat/CommonChat.js","redux/actions/fetchPrivateChats.js","components/PrivateChat/PrivateChat.js","pages/PrivateChats/PrivateChats.js","redux/actions/authUser.js","pages/Auth/Auth.js","redux/actions/createPrivateChat.js","pages/CreatePrivateChat/CreatePrivateChat.js","App.js","serviceWorker.js","redux/reducers/messagesReducer.js","redux/reducers/userReducer.js","redux/reducers/privateChatReducer.js","redux/reducers/rootRducer.js","index.js"],"names":["deleteUserSuccess","type","connect","dispatch","deleteUser","localStorage","clear","window","location","reload","className","to","onClick","Header","deleteMessageSuccess","message","getUser","userData","JSON","parse","getItem","getUserSuccess","user","fetchMessages","url","Reload","fetchMessagesStart","messages","axios","get","then","response","data","Object","keys","forEach","key","push","id","author","author_id","text","publish_date","fetchMessagesSuccess","scrollDown","e","fetchMessagesError","console","log","error","editingMessage","isEditing","messageWhichEditingSuccess","messageWhichEditing","state","userReducer","messagesReducer","removeMessage","delete","editMessageHandler","removeMessageHandler","Loader","document","getElementById","chatWindow","scrollTop","scrollHeight","loading","useState","isReady","setIsReady","useEffect","length","map","msg","render","getFormattedData","date","Date","getDate","slice","getMonth","getFullYear","getHours","getMinutes","getSeconds","createMessageSuccess","editMessageSuccess","createMessage","name","post","res","editMessage","put","setText","button","preventDefault","trim","createMessageHandler","value","onChange","target","withRouter","match","newUrl","params","privateId","CommonChat","fetchPrivateChatsStart","fetchPrivateChatsSuccess","privateChats","fetchPrivateChatsError","PrivateChat","chatData","passwordInput","setPasswordInput","success","setSuccess","password","disabled","privateChatsReducer","isLoading","fetchPrivateChats","respondChats","reverse","chat","privateChatsList","authUserSuccess","makeId","possible","i","charAt","Math","floor","random","authUser","isRegisteredUser","respondUser","setItem","stringify","setName","setPassword","buttonDisable","setButtonDisable","changeNameInputHandler","seter","placeholder","setUserHandler","createPrivateChatSuccess","createPrivateChat","toString","chatName","setChatName","chatPassword","setChatPassword","changeInputHandler","event","path","component","CreatePrivateChat","exact","Chat","PrivateChats","from","Auth","Boolean","hostname","initialState","action","filter","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","app","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0635440d.chunk.js","sourcesContent":["import {DELETE_USER} from \"../types\"\r\n\r\nexport const deleteUser = () => dispatch => {\r\n    localStorage.clear()\r\n    dispatch(deleteUserSuccess())\r\n    window.location.reload()\r\n}\r\n\r\nexport const deleteUserSuccess = () => {\r\n    return {\r\n        type: DELETE_USER\r\n    }\r\n}","export const FETCH_MESSAGES_START = 'MESSAGE/FETCH_MESSAGES_START'\r\nexport const FETCH_MESSAGES_SUCCESS = 'MESSAGE/FETCH_MESSAGES_SUCCESS'\r\nexport const FETCH_MESSAGES_ERROR = 'MESSAGE/FETCH_MESSAGES_ERROR'\r\nexport const CREATE_MESSAGE = 'MESSAGE/CREATE_MESSAGE'\r\nexport const REMOVE_MESSAGE = 'MESSAGE/REMOVE_MESSAGE'\r\nexport const EDIT_MESSAGE = 'MESSAGE/EDIT_MESSAGE'\r\nexport const EDITING_MESSAGE = 'MESSAGE/EDITING_MESSAGE'\r\nexport const MESSAGE_WHICH_EDITING = 'MESSAGE/MESSAGE_WHICH_EDITING'\r\nexport const CREATE_USER = 'USER/CREATE_USER'\r\nexport const DELETE_USER = 'USER/DELETE_USER'\r\nexport const AUTH_USER = 'USER/AUTH_USER'\r\nexport const GET_USER = 'USER/GET_USER'\r\nexport const CREATE_CHAT = 'PRIVATE/CREATE_CHAT'\r\nexport const FETCH_PRIVATE_CHAT_START = 'PRIVATE/FETCH_PRIVATE_CHAT_START'\r\nexport const FETCH_PRIVATE_CHAT_SUCCESS = 'PRIVATE/FETCH_PRIVATE_CHAT_SUCCESS'\r\nexport const FETCH_PRIVATE_CHAT_ERROR = 'PRIVATE/FETCH_PRIVATE_CHAT_ERROR'\r\nexport const CREATE_PRIVATE_CHAT = 'PRIVATE/CREATE_PRIVATE_CHAT'\r\n","import React from 'react';\r\nimport './Navbar.scss'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {deleteUser} from \"../../redux/actions/deleteUser\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst Navbar = ({deleteUser}) => {\r\n    const outHandler = () => {\r\n        deleteUser()\r\n    }\r\n\r\n    return (\r\n        <ul className='header__navbar navbar'>\r\n            <li className='navbar__item'>\r\n                <NavLink to=\"/private\" className='navbar__link'>Закртые чаты</NavLink>\r\n            </li>\r\n            <li className='navbar__item'>\r\n                <NavLink to=\"/common\" className='navbar__link'>Общий чат</NavLink>\r\n            </li>\r\n            <li className='navbar__item'>\r\n                <NavLink to=\"/auth\" className='navbar__link' onClick={outHandler}>Выход</NavLink>\r\n            </li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        deleteUser: () => dispatch(deleteUser())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Navbar)","import React from 'react';\r\nimport './Header.scss'\r\nimport Navbar from \"../Navbar/Navbar\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='header'>\r\n            <h1 className='header__heading'>Work Chat</h1>\r\n            <Navbar />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import {REMOVE_MESSAGE} from \"../types\"\r\nimport axios from \"axios\"\r\n\r\nexport const removeMessage = (url, message) => dispatch => {\r\n    axios.delete(url + `/${message.id}.json`)\r\n    dispatch(deleteMessageSuccess(message))\r\n}\r\n\r\nexport const deleteMessageSuccess = (message) => {\r\n    return {\r\n        type: REMOVE_MESSAGE,\r\n        message\r\n    }\r\n}","import {GET_USER} from \"../types\"\r\nimport axios from \"axios\"\r\n\r\nexport const getUser = () => dispatch => {\r\n    const userData = JSON.parse(localStorage.getItem('userData'))\r\n    dispatch(getUserSuccess(userData))\r\n}\r\n\r\nexport const getUserSuccess = (user) => {\r\n    return {\r\n        type: GET_USER,\r\n        user\r\n    }\r\n}","import axios from \"axios\"\r\nimport {FETCH_MESSAGES_ERROR, FETCH_MESSAGES_START, FETCH_MESSAGES_SUCCESS} from \"../types\"\r\nimport {scrollDown} from \"../../components/MessageList/MessageList\"\r\nimport {getUser} from \"./getUser\"\r\n\r\nexport const fetchMessages = (url, Reload = true) => {\r\n    return dispatch => {\r\n        if (Reload) {\r\n            dispatch(fetchMessagesStart())\r\n        }\r\n        try {\r\n            const messages = []\r\n            axios.get(url + '.json')\r\n                .then(response => {\r\n                    if (response.data) {\r\n                        Object.keys(response.data).forEach(key => {\r\n                            const message = response.data[key]\r\n                            messages.push({\r\n                                id: key,\r\n                                author: message.author,\r\n                                author_id: message.author_id,\r\n                                text: message.text,\r\n                                publish_date: message.publish_date\r\n                            })\r\n                        })\r\n                    }\r\n                })\r\n                .then(() => dispatch(getUser()))\r\n                .then(() => dispatch(fetchMessagesSuccess(messages)))\r\n                .then(() => Reload? scrollDown() : {})\r\n\r\n\r\n        } catch (e) {\r\n            dispatch(fetchMessagesError(e))\r\n            console.log(e.message)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchMessagesStart = () => {\r\n    return {\r\n        type: FETCH_MESSAGES_START\r\n    }\r\n}\r\n\r\nexport const fetchMessagesSuccess = (messages) => {\r\n    return {\r\n        type: FETCH_MESSAGES_SUCCESS,\r\n        messages\r\n    }\r\n}\r\n\r\nexport const fetchMessagesError = (e) => {\r\n    return {\r\n        type: FETCH_MESSAGES_ERROR,\r\n        error: e\r\n    }\r\n}","import {EDITING_MESSAGE, MESSAGE_WHICH_EDITING} from \"../types\"\r\n\r\nexport const messageWhichEditing = message => dispatch => {\r\n    dispatch(editingMessage(true))\r\n    dispatch(messageWhichEditingSuccess(message))\r\n}\r\n\r\nexport const editingMessage = (isEditing) => {\r\n    return {\r\n        type: EDITING_MESSAGE,\r\n        isEditing\r\n    }\r\n}\r\n\r\nexport const messageWhichEditingSuccess = message => {\r\n    return {\r\n        type: MESSAGE_WHICH_EDITING,\r\n        messageWhichEditing: message\r\n    }\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './Message.scss'\r\nimport {connect} from \"react-redux\"\r\nimport {removeMessage} from \"../../redux/actions/removeMessage\"\r\nimport {fetchMessages} from \"../../redux/actions/fetchMessages\"\r\nimport {getUser} from \"../../redux/actions/getUser\"\r\nimport {editingMessage, messageWhichEditing} from \"../../redux/actions/messageWhichEditing\"\r\n\r\nconst Message = ({message, user, url, removeMessage, editingMessage, isEditing, messageWhichEditing}) => {\r\n    const editMessageHandler = (message) => {\r\n        messageWhichEditing(message)\r\n\r\n        if (isEditing) {\r\n            editingMessage(false)\r\n        }\r\n    }\r\n\r\n    const removeMessageHandler = (message) => {\r\n        removeMessage(url, message)\r\n    }\r\n\r\n    return (\r\n        <li className='message'>\r\n            <div>\r\n                <h6 className='message__name'>{message.author}</h6>\r\n                <p className='message__text'>{message.text}</p>\r\n                <small className='message__publish-date'>{message.publish_date}</small>\r\n            </div>\r\n            {\r\n                user.id === message.author_id\r\n                ?   <div className='message__buttons'>\r\n                        <button className='button__edit-btn' onClick={() => editMessageHandler(message)}>Редактировать</button>\r\n                        <button className='button__remove-btn' onClick={() => removeMessageHandler(message)}>Удалить</button>\r\n                    </div>\r\n                :   null\r\n            }\r\n        </li>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userReducer.user,\r\n        isEditing: state.messagesReducer.isEditing\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        removeMessage: (url, message) => dispatch(removeMessage(url, message)),\r\n        fetchMessages: () => dispatch(fetchMessages),\r\n        getUser: () => dispatch(getUser()),\r\n        messageWhichEditing: (message) => dispatch(messageWhichEditing(message)),\r\n        editingMessage: (isEditing) => dispatch(editingMessage(isEditing))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);","import React from 'react';\r\nimport './Loader.scss'\r\n\r\nconst Loader = () => (\r\n    <div className=\"lds-spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n)\r\n\r\nexport default Loader;","import React, {useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport './MessageList.scss'\r\nimport Message from \"../Message/Message\"\r\nimport Loader from \"../Loader/Loader\"\r\nimport {fetchMessages} from \"../../redux/actions/fetchMessages\"\r\n\r\nexport const scrollDown = () => {\r\n    if (document.getElementById('chat-window')) {\r\n        const chatWindow = document.getElementById('chat-window')\r\n        chatWindow.scrollTop = chatWindow.scrollHeight;\r\n    }\r\n}\r\n\r\nconst MessageList = ({url, messages, fetchMessages, loading}) => {\r\n\r\n    const [isReady, setIsReady] = useState(false)\r\n\r\n    useEffect(() => {\r\n        fetchMessages(url)\r\n        setIsReady(true)\r\n\r\n    }, [])\r\n\r\n    const chatWindow = (messages) => {\r\n        return (\r\n            <ul className='common-chat__list'>\r\n                {messages.map(msg => <Message message={msg} url={url} key={msg.publish_date} />)}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const render = (isReady) => {\r\n        return (\r\n             isReady\r\n             ?  loading\r\n                ?   <Loader/>\r\n                :   messages.length\r\n                    ?   chatWindow(messages)\r\n                    :   <p className='empty-message'>Сообщений ещё нет, стань первым!</p>\r\n             :  null\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <div id='chat-window'>\r\n                {render(isReady)}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagesReducer.messages,\r\n        loading: state.messagesReducer.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchMessages: (url) => dispatch(fetchMessages(url))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","import {CREATE_MESSAGE} from \"../types\"\r\nimport axios from 'axios'\r\nimport {scrollDown} from \"../../components/MessageList/MessageList\"\r\nimport {getUser} from \"./getUser\"\r\n\r\nexport const getFormattedData = () => {\r\n    const date = new Date();\r\n    return ('0' + date.getDate()).slice(-2) + '/' + ('0' + (date.getMonth() + 1)).slice(-2) + '/' + date.getFullYear() + ' ' + ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2) + ':' + ('0' + date.getSeconds()).slice(-2)\r\n}\r\n\r\nexport const createMessage = (text, author, url) => {\r\n    return dispatch => {\r\n        const message = {\r\n            author: author.name,\r\n            author_id: author.id,\r\n            text: text,\r\n            publish_date: getFormattedData()\r\n        }\r\n\r\n        axios.post(url + '.json', message)\r\n            .then(res => message.id = res.data.name)\r\n            .then(dispatch(createMessageSuccess(message)))\r\n            .then(() => scrollDown())\r\n\r\n    }\r\n}\r\n\r\nexport const createMessageSuccess = (message) => {\r\n    return {\r\n        type: CREATE_MESSAGE,\r\n        message\r\n    }\r\n}","import {EDIT_MESSAGE} from \"../types\"\r\nimport axios from \"axios\"\r\nimport {fetchMessages} from \"./fetchMessages\"\r\nimport {editingMessage} from \"./messageWhichEditing\"\r\n\r\n\r\nexport const editMessage = (text, message, url) => dispatch => {\r\n    dispatch(editMessageSuccess())\r\n    axios.put(url + `/${message.id}.json`, {...message, text})\r\n        .then(() => dispatch(editingMessage(false)))\r\n        .then(() => dispatch(fetchMessages(url, false)))\r\n}\r\n\r\nexport const editMessageSuccess = () => {\r\n    return {\r\n        type: EDIT_MESSAGE\r\n    }\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\"\r\nimport {createMessage} from \"../../redux/actions/createMessage\"\r\nimport {editMessage} from \"../../redux/actions/editMessage\"\r\nimport {fetchMessages} from \"../../redux/actions/fetchMessages\"\r\nimport {editingMessage} from \"../../redux/actions/messageWhichEditing\"\r\nimport './MessageInput.scss'\r\n\r\nconst MessageInput = ({url, createMessage, user, editMessage, editingMessage, isEditing, messageWhichEditing}) => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const ChangeTextHandler = (e) => {\r\n        setText(e.target.value)\r\n    }\r\n\r\n    const createMessageHandler = (text, e) => {\r\n        e.preventDefault()\r\n        if (text.trim()) {\r\n            createMessage(text, user, url)\r\n        }\r\n\r\n        setText('')\r\n    }\r\n\r\n    const editMessageHandler = (text, e) => {\r\n        e.preventDefault()\r\n        editMessage(text, messageWhichEditing, url)\r\n        editingMessage(false)\r\n        setText('')\r\n    }\r\n\r\n    const button = (\r\n        isEditing\r\n        ?   <button\r\n                className=\"message-input__button\"\r\n                type=\"submit\"\r\n                onClick={(e) => editMessageHandler(text, e)}\r\n            >\r\n                Отредактировать\r\n            </button>\r\n        :   <button\r\n                className=\"message-input__button\"\r\n                type=\"submit\"\r\n                onClick={(e) => createMessageHandler(text, e)}\r\n            >\r\n                Отправить\r\n            </button>\r\n\r\n    )\r\n\r\n    return (\r\n        <form className='message-input__from'>\r\n            <input\r\n                className='message-input__input'\r\n                type=\"text\"\r\n                value={text}\r\n                onChange={ChangeTextHandler}\r\n            />\r\n            {button}\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userReducer.user,\r\n        isEditing: state.messagesReducer.isEditing,\r\n        messageWhichEditing: state.messagesReducer.messageWhichEditing\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createMessage: (text, user, url) => dispatch(createMessage(text, user, url)),\r\n        editMessage: (text, message, url) => dispatch(editMessage(text, message, url)),\r\n        fetchMessages: () => dispatch(fetchMessages()),\r\n        editingMessage: (isEditing) => dispatch(editingMessage(isEditing))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageInput);","import React, {useEffect} from 'react'\r\nimport './Chat.scss'\r\nimport MessageList from \"../MessageList/MessageList\"\r\nimport MessageInput from \"../MessageInput/MessageInput\"\r\nimport {withRouter} from \"react-router-dom\"\r\n\r\nconst Chat = ({url = 'https://working-chat.firebaseio.com/private-chats', match}) => {\r\n    let newUrl = url\r\n    if(match.params.privateId) {\r\n        newUrl = url + `/${match.params.privateId}/messages`\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MessageList url={newUrl} />\r\n            <MessageInput url={newUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Chat)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport './CommonChat.scss'\r\nimport Chat from \"../../components/Chat/Chat\"\r\n\r\nconst CommonChat = () => {\r\n    return (\r\n        <div>\r\n            <Chat url={'https://working-chat.firebaseio.com/messages'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         state\r\n//     }\r\n// }\r\n//\r\n// const mapDispatchToProps = {\r\n//\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(CommonChat)\r\nexport default (CommonChat)","import axios from \"axios\"\r\nimport {\r\n    FETCH_PRIVATE_CHAT_ERROR,\r\n    FETCH_PRIVATE_CHAT_START,\r\n    FETCH_PRIVATE_CHAT_SUCCESS\r\n} from \"../types\"\r\nimport {scrollDown} from \"../../components/MessageList/MessageList\"\r\n\r\nexport const fetchPrivateChats = (Reload = true, url = `https://working-chat.firebaseio.com/private-chats.json`) => {\r\n    return dispatch => {\r\n        if (Reload) {\r\n            dispatch(fetchPrivateChatsStart())\r\n        }\r\n        try {\r\n            let respondChats = []\r\n            axios.get(url)\r\n                .then(response => {\r\n                    if (response.data) {\r\n                        Object.keys(response.data).forEach(key => {\r\n                            respondChats.push({...response.data[key], privateId: key})\r\n                        })\r\n                    }\r\n\r\n                    return respondChats\r\n                })\r\n                .then((res) => dispatch(fetchPrivateChatsSuccess(respondChats)))\r\n                .then(() => scrollDown())\r\n                // .then(() => dispatch(fetchMessagesSuccess([])))\r\n\r\n        } catch (e) {\r\n            dispatch(fetchPrivateChatsError(e))\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchPrivateChatsStart = () => {\r\n    return {\r\n        type: FETCH_PRIVATE_CHAT_START\r\n    }\r\n}\r\n\r\nexport const fetchPrivateChatsSuccess = (privateChats) => {\r\n    return {\r\n        type: FETCH_PRIVATE_CHAT_SUCCESS,\r\n        privateChats\r\n    }\r\n}\r\n\r\nexport const fetchPrivateChatsError = (e) => {\r\n    return {\r\n        type: FETCH_PRIVATE_CHAT_ERROR,\r\n        error: e\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport './PrivateChat.scss'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst PrivateChat = ({chatData}) => {\r\n    const [passwordInput, setPasswordInput] = useState('')\r\n    const [success,setSuccess] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if (chatData.password === passwordInput)\r\n            setSuccess(false)\r\n        else {\r\n            setSuccess(true)\r\n        }\r\n    }, [passwordInput])\r\n\r\n\r\n    return (\r\n        <li className='private-chat'>\r\n            <div className='private-chat__room'>\r\n                <h6 className='room__name'>{chatData.name}</h6>\r\n                <form className='room__form'>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={passwordInput}\r\n                        onChange={(e) => setPasswordInput(e.target.value)}\r\n                    />\r\n                    <Link to={`/private/${chatData.privateId}`}>\r\n                        <button\r\n                            // onClick={successHandler}\r\n                            disabled={success}\r\n                        >\r\n                            Войти\r\n                        </button>\r\n                    </Link>\r\n                </form>\r\n            </div>\r\n        </li>\r\n\r\n    );\r\n};\r\n\r\n//const mapStateToProps = (state) => {\r\n//return {\r\n//\r\n//}\r\n//}\r\n\r\n//const mapDispatchToProps = (dispatch) => {\r\n//return {\r\n//\r\n//}\r\n//}\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\r\nexport default PrivateChat;","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport './PrivateChats.scss'\r\nimport {Link} from \"react-router-dom\"\r\nimport {fetchPrivateChats} from \"../../redux/actions/fetchPrivateChats\"\r\nimport Loader from \"../../components/Loader/Loader\"\r\nimport PrivateChat from \"../../components/PrivateChat/PrivateChat\"\r\n\r\nconst PrivateChats = ({privateChats, fetchPrivateChats, isLoading}) => {\r\n    const [isReady, setIsReady] = useState(false)\r\n\r\n    useEffect(() => {\r\n        fetchPrivateChats()\r\n        setIsReady(true)\r\n    }, [])\r\n\r\n    const privateChatsList = (privateChats) => {\r\n        return (\r\n            <ul className='common-chat__list'>\r\n                {privateChats.reverse().map(chat => <PrivateChat chatData={chat} key={chat.privateId}/>)}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const render = (isReady) => {\r\n        return (\r\n            isReady\r\n            ?   isLoading\r\n                ?   <Loader/>\r\n                :   privateChats.length\r\n                    ?   privateChatsList(privateChats)\r\n                    :   <p className='empty-message'>Приватных чатов ещё нет!</p>\r\n\r\n            :   null\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <Link to='/create-private-chat' className='create-chat__button'>\r\n                <button className='btn btn-primary'>\r\n                    Создать приватный чат\r\n                </button>\r\n            </Link>\r\n            <div id='chat-window'>\r\n                {render(isReady)}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        privateChats: state.privateChatsReducer.privateChats,\r\n        isLoading: state.privateChatsReducer.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchPrivateChats: () => dispatch(fetchPrivateChats())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChats)","import {AUTH_USER} from \"../types\"\r\nimport axios from 'axios'\r\nimport {makeId} from \"../../pages/Auth/Auth\"\r\n\r\nexport const authUser = (name, password, url = 'https://working-chat.firebaseio.com/users.json') => {\r\n    return dispatch => {\r\n        let isRegisteredUser = false\r\n\r\n        axios.get(url)\r\n            .then(response => {\r\n                if (response.data) {\r\n                    Object.keys(response.data).forEach(key => {\r\n                        const respondUser = response.data[key]\r\n                        if (respondUser.name === name && respondUser.password === password) {\r\n                            isRegisteredUser = true\r\n                            dispatch(authUserSuccess(respondUser))\r\n                            localStorage.setItem('userData', JSON.stringify(respondUser))\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n                if (!isRegisteredUser) {\r\n                    const user = {\r\n                        name,\r\n                        password,\r\n                        id: makeId()\r\n                    }\r\n\r\n                    axios.post(url, user)\r\n                        .then(() => dispatch(authUserSuccess(user)))\r\n                        .then(() => localStorage.setItem('userData', JSON.stringify(user)))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const authUserSuccess = (user) => {\r\n    return {\r\n        type: AUTH_USER,\r\n        user\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Link, NavLink, withRouter} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios'\r\nimport './Auth.scss'\r\nimport {authUser} from \"../../redux/actions/authUser\"\r\n\r\nexport const makeId = (length = 30) => {\r\n    let text = \"\";\r\n    let possible = \"abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    for(let i = 0; i < length; i++)\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n    return text;\r\n}\r\n\r\nconst Auth = ({authUser}) => {\r\n\r\n    const [name, setName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [buttonDisable, setButtonDisable] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if (!!(name.trim() && password.trim())) {\r\n            setButtonDisable(false)\r\n        } else {\r\n            setButtonDisable(true)\r\n        }\r\n    }, [name, password])\r\n\r\n    const changeNameInputHandler = (seter, e) => {\r\n        seter(e.target.value)\r\n    }\r\n\r\n    const setUserHandler = (name, password) => {\r\n        authUser(name, password)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='auth'>\r\n            <div className='header'>\r\n                <h1 className='header__heading'>Work Chat</h1>\r\n            </div>\r\n            <form className='auth__form'>\r\n                <div className=\"form-group\">\r\n                    <label>Введите ваше имя</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Ваше имя\"\r\n                        value={name}\r\n                        onChange={(e) => changeNameInputHandler(setName, e)}\r\n                    />\r\n                    <label>Введите ваш пароль</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Пароль\"\r\n                        value={password}\r\n                        onChange={(e) => changeNameInputHandler(setPassword, e)}\r\n                    />\r\n                </div>\r\n                <Link to='/common'>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary\"\r\n                        disabled={buttonDisable}\r\n                        onClick={() => setUserHandler(name, password)}\r\n\r\n                    >\r\n                        Войти\r\n                    </button>\r\n                </Link>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authUser: (name, password) => dispatch(authUser(name, password))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Auth)","import {CREATE_MESSAGE, CREATE_PRIVATE_CHAT} from \"../types\"\r\nimport axios from 'axios'\r\nimport {getUser} from \"./getUser\"\r\n\r\nexport const createPrivateChat = (name, password, author) => {\r\n    return dispatch => {\r\n        const chat = {\r\n            name: name,\r\n            author_id: author.id,\r\n            password: password,\r\n            publish_date: new Date().toString(),\r\n            messages: []\r\n        }\r\n\r\n        axios.post(`https://working-chat.firebaseio.com/private-chats.json`, chat)\r\n            .then(res => chat.privateId = res.data.name)\r\n            .then(dispatch(createPrivateChatSuccess(chat)))\r\n            .then(() => dispatch(getUser()))\r\n\r\n    }\r\n}\r\n\r\nexport const createPrivateChatSuccess = (privateChats) => {\r\n    return {\r\n        type: CREATE_PRIVATE_CHAT,\r\n        privateChats\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {createPrivateChat} from \"../../redux/actions/createPrivateChat\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst CreatePrivateChat = ({user, createPrivateChat}) => {\r\n    const [chatName, setChatName] = useState('')\r\n    const [chatPassword, setChatPassword] = useState('')\r\n    const [buttonDisable, setButtonDisable] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if (!!(chatName.trim() && chatPassword.trim())) {\r\n            setButtonDisable(false)\r\n        } else {\r\n            setButtonDisable(true)\r\n        }\r\n    }, [chatName, chatPassword])\r\n\r\n    const changeInputHandler = (seter, event) => {\r\n        seter(event.target.value)\r\n    }\r\n\r\n    const createChatHandler = () => {\r\n        createPrivateChat(chatName, chatPassword, user)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='auth'>\r\n            <form className='auth__form'>\r\n                <div className=\"form-group\">\r\n                    <label>Введите название чата</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Имя чата\"\r\n                        value={chatName}\r\n                        onChange={(e) => changeInputHandler(setChatName, e)}\r\n                    />\r\n                    <label>Введите пароль</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Пароль\"\r\n                        value={chatPassword}\r\n                        onChange={(e) => changeInputHandler(setChatPassword, e)}\r\n                    />\r\n                </div>\r\n                <Link to='/common'>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary\"\r\n                        disabled={buttonDisable}\r\n                        onClick={createChatHandler}\r\n\r\n                    >\r\n                        Создать чат\r\n                    </button>\r\n                </Link>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userReducer.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createPrivateChat: (name, password, author) => dispatch(createPrivateChat(name, password, author))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePrivateChat);","import React, {useEffect} from 'react';\nimport Header from \"./components/Header/Header\"\nimport {Route} from \"react-router-dom\"\nimport CommonChat from '../src/pages/CommonChat/CommonChat'\nimport PrivateChats from \"./pages/PrivateChats/PrivateChats\"\nimport {Redirect} from \"react-router-dom\"\nimport Auth from \"./pages/Auth/Auth\"\nimport {connect} from \"react-redux\"\nimport {getUser} from \"./redux/actions/getUser\"\nimport CreatePrivateChat from \"./pages/CreatePrivateChat/CreatePrivateChat\"\nimport Chat from \"./components/Chat/Chat\"\n\nconst App = ({user, getUser}) => {\n    useEffect(() => {\n        getUser()\n    }, [])\n\n    const render = (\n        user\n            ?   <>\n                <Header/>\n\n                <Route path='/common' component={CommonChat} />\n                <Route path='/create-private-chat' component={CreatePrivateChat} exact/>\n                <Route path='/private/:privateId' component={Chat} />\n                <Route path='/private' component={PrivateChats} exact/>\n\n                <Redirect from='' to='/common'/>\n            </>\n            :   <>\n                    <Route path='/auth' component={Auth} />\n                    <Redirect from='' to='/auth'/>\n                </>\n    )\n\n    return (\n        <div className='container'>\n            {render}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.userReducer.user\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getUser: () => dispatch(getUser())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CREATE_MESSAGE, EDIT_MESSAGE, EDITING_MESSAGE,\r\n    FETCH_MESSAGES_ERROR,\r\n    FETCH_MESSAGES_START,\r\n    FETCH_MESSAGES_SUCCESS, MESSAGE_WHICH_EDITING,\r\n    REMOVE_MESSAGE\r\n} from \"../types\"\r\n\r\nconst initialState = {\r\n    messages: [],\r\n    messageWhichEditing: {},\r\n    loading: false,\r\n    error: null,\r\n    isEditing: false\r\n}\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_MESSAGES_START:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_MESSAGES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                messages: [...action.messages]\r\n            }\r\n        case FETCH_MESSAGES_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case CREATE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message]\r\n            }\r\n        case REMOVE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages.filter(msg => msg !== action.message)]\r\n            }\r\n        case MESSAGE_WHICH_EDITING:\r\n            return {\r\n                ...state,\r\n                messageWhichEditing: action.messageWhichEditing\r\n            }\r\n        case EDITING_MESSAGE:\r\n            return {\r\n                ...state,\r\n                isEditing: action.isEditing\r\n            }\r\n        case EDIT_MESSAGE:\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default messagesReducer","import {AUTH_USER, DELETE_USER, GET_USER} from \"../types\"\r\n\r\nconst initialState = {\r\n    user: {}\r\n}\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case AUTH_USER:\r\n            return {\r\n                user: action.user\r\n            }\r\n        case DELETE_USER:\r\n            return {\r\n                user: {}\r\n            }\r\n        case GET_USER:\r\n            return {\r\n                user: action.user\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default userReducer","import {\r\n    CREATE_PRIVATE_CHAT,\r\n    FETCH_PRIVATE_CHAT_START,\r\n    FETCH_PRIVATE_CHAT_SUCCESS\r\n} from \"../types\"\r\n\r\nconst initialState = {\r\n    privateChats: [],\r\n    loading: false\r\n}\r\n\r\nconst privateChatsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_PRIVATE_CHAT_START:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_PRIVATE_CHAT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                privateChats: action.privateChats,\r\n                loading: false\r\n            }\r\n        case CREATE_PRIVATE_CHAT:\r\n            return {\r\n                ...state,\r\n                privateChats: [...state.privateChats, action.privateChats]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default privateChatsReducer","import {combineReducers} from \"redux\"\r\nimport messagesReducer from \"./messagesReducer\"\r\nimport userReducer from \"./userReducer\"\r\nimport privateChatsReducer from \"./privateChatReducer\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    messagesReducer,\r\n    userReducer,\r\n    privateChatsReducer\r\n})\r\n\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\"\nimport {applyMiddleware, compose, createStore} from \"redux\"\nimport rootReducer from \"./redux/reducers/rootRducer\"\nimport thunk from \"redux-thunk\"\nimport {BrowserRouter, HashRouter} from \"react-router-dom\"\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk)\n    )\n)\n\nconst app = (\n    <Provider store={store}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>\n\n\n\n)\n\nReactDOM.render(\n    <React.StrictMode>\n        {app}\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}